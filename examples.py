from utils import list_badges
import json
import re


def notebook_headers(
    fname,
    title,
    description,
    tags=[],
    author="N/A",
    model_author="N/A",
    dependencies=[],
    modules=["ampl", "coin"],
):
    badges = list_badges(fname, colab_only=False)
    modules_str = ", ".join(["'" + m + "'" for m in modules])
    return [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                f"# {title}\n",
                f"{' '.join(badges)}\n",
                "\n",
                f"Description: {description}\n",
                "\n",
                f"Tags: {', '.join(tags)}\n",
                "\n",
                f"Notebook author: {author}\n",
                "\n",
                f"Model author: {model_author}\n",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Install dependencies\n",
                "!pip install -q amplpy ampltools" + " ".join(dependencies),
            ],
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Google Colab & Kaggle interagration\n",
                f"MODULES=[{modules_str}]\n",
                "from ampltools import cloud_platform_name, ampl_notebook\n",
                "from amplpy import AMPL, register_magics\n",
                "if cloud_platform_name() is None:\n",
                "    ampl = AMPL() # Use local installation of AMPL\n",
                "else:\n",
                "    ampl = ampl_notebook(modules=MODULES) # Install AMPL and use it\n",
                "register_magics(ampl_object=ampl) # Evaluate %%ampl_eval cells with ampl.eval()",
            ],
        },
    ]


def markdown_cell(content):
    return {
        "cell_type": "markdown",
        "metadata": {},
        "source": [line + "\n" for line in content.split("\n")],
    }


def code_cell(content):
    return {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [line + "\n" for line in content.split("\n")],
    }


def generate_notebook(fname, cells):
    notebook = {
        "cells": cells,
        "metadata": {
            "kernelspec": {
                "display_name": "Python 3 (ipykernel)",
                "language": "python",
                "name": "python3",
            },
            "language_info": {
                "codemirror_mode": {"name": "ipython", "version": 3},
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.9.8",
            },
        },
        "nbformat": 4,
        "nbformat_minor": 2,
    }
    open(fname, "w").write(
        json.dumps(notebook, separators=(",", ":"), ensure_ascii=False) + "\n"
    )


def book_example(name, title, description, tags, markdown_header, files, ampl_commands):
    from os import path

    notebook_fname = f"book/{name}.ipynb"
    modules = ["ampl", "coin"]
    solvers = re.findall(r"option\ssolver\s+([^\s;]+)\s*;", ampl_commands)
    for solver in solvers:
        if solver not in ("cbc", "ipopt", "bonmin", "couenne"):
            modules.append(solver)
    if len(modules) > 2:
        print("Using modules:", modules)
    else:
        print("Using default modules:", modules)
    cells = notebook_headers(
        notebook_fname, title=title, description=description, tags=tags, modules=modules
    )
    cells.append(markdown_cell(markdown_header))
    for fname in files:
        code = f"%%writefile {path.basename(fname)}\n" + open(fname, "r").read()
        cells.append(code_cell(code))
    cells.append(code_cell("%%ampl_eval\n" + ampl_commands))
    generate_notebook(notebook_fname, cells)
    print(f"Generated {notebook_fname}.")


def config_basic_example(
    fname, mod_fname=None, dat_fname=None, run_fname=None, md_fname=None
):
    if not mod_fname:
        mod_fname = f"{fname}.mod"
    if not dat_fname:
        dat_fname = f"{fname}.dat"
    if not run_fname:
        run_fname = f"{fname}.run"
    if md_fname:
        markdown_header = open(f"notebook_models/{md_fname}", "r").read()
    else:
        markdown_header = f"### Example: {fname}\n"
        markdown_header += (
            f"autogenerated using {mod_fname}, {dat_fname}, and {run_fname}"
        )
        # open(f"notebook_models/{fname}.md", "w").write(markdown_header)
    return {
        "name": fname,
        "title": f"Book Example: {fname}",
        "description": f"book example autogenerated using {mod_fname}, {dat_fname}, and {run_fname}",
        "tags": ["ampl-only", "ampl-book"],
        "markdown_header": markdown_header,
        "files": [
            f"notebook_models/{mod_fname}",
            f"notebook_models/{dat_fname}",
        ],
        "ampl_commands": open(f"notebook_models/{run_fname}", "r").read(),
    }


EXAMPLES = [
    config_basic_example(fname, mod_fname, dat_fname, run_fname, md_fname)
    for fname, mod_fname, dat_fname, run_fname, md_fname in [
        ("diet", "diet.mod", "diet.dat", "diet.run", "diet.md"),
        ("econ", "econ.mod", "econ.dat", "econ.run", "econ.md"),
        ("multmip1", "multmip1.mod", "multmip1.dat", "multmip1.run", "multmip1.md"),
        ("net1", "net1.mod", "net1.dat", "net1.run", "net1.md"),
        ("nltrans", "nltransd.mod", "nltrans.dat", "nltrans.run", "nltrans.md"),
        ("prod", "prod.mod", "prod.dat", "prod.run", "prod.md"),
        ("steel", "steel.mod", "steel.dat", "steel.run", "steel.md"),
        ("transp", "transp.mod", "transp.dat", "transp.run", "transp.md"),
    ]
]


if __name__ == "__main__":
    for example in EXAMPLES:
        book_example(
            name=example["name"],
            title=example["title"],
            description=example["description"],
            tags=example["tags"],
            markdown_header=example["markdown_header"],
            files=example["files"],
            ampl_commands=example["ampl_commands"],
        )
